#+TITLE: Getting Started on Nyxt Hacking: #1 Episode
#+AUTHOR: By Pedro Delfino
#+FILETAGS: :lisp:

* The series

Hacking is an art and Nyxt hacking is one of its kind. Nyxt could be
defined as Minecraft for web browsing in the sense that it is an open
world. Being a fully computable environment, the constraints are much
more on the hacker's creativity than in the system itself.

Some Nyxt users have already done impressive work. For instance, the
[[https://github.com/atlas-engineer/nyxt/blob/master/documents/EXTENSIONS.org][extensions]] and config files exposed in [[https://discourse.atlas.engineer/t/casually-showing-off-my-config/74][discourse's Configuration
Expos√®]].

Unfortunately, not all users are that independent and
knowledgeable. Thus, this article has a beginner friendly approach. It
assumes zero to little knowledge in the Nyxt universe, which involves
the Nyxt source code itself, Common Lisp, SBCL, and Emacs. However, it
does assume prior knowledge of Nyxt as a Graphical User Interface
(GUI) user. Hence, the reader needs to have basic understanding on how
to execute commands and navigate using Nyxt.

In case you haven't, it is easy to reach that level. Start Nyxt, look
for the "Tutorial" button on the starting page. Or click on the
Execute icon (ùÑò) and type "Tutorial".  Then, read the tutorial,
especially the first half.

This is the first article of a five component series. Here, a
bookmarklet is going to be built using the REPL built-in on Nyxt. On
the second episode, the same bookmarklet is going to be built but
using SBCL straight from the command line. On the third article,
again, the same bookmarklet will be added but using Emacs powered with
Slime and Vim powered with Vlime. The objective of making some parts
the same is to isolate some variables and introduce newcommers to the
multiple ways and environments of tweaking Nyxt.

In the four article of the series, a command will be constructed to
achieve the same result of the bookmarklet. And, finally, on the fift
and last article, a mode will be made to provide a similar feature to
the ones described as a bookmarklet and command.

All the five constructions will be under the same domain: hacking
YouTube videos so that they can be played in a faster speed than the
one allowed by YouTube's GUI.

Why using YouTube as a guinea pig? Well, firstly, because it fullfils
the definition of what is a
[[http://www.paulgraham.com/gba.html][hack]]:

#+BEGIN_QUOTE 
It's called a hack when you do something in an ugly
way. But when you do something so clever that you somehow beat the
system, that's also called a hack. -- Paul Graham 
#+END_QUOTE

Secondly, because many new Nyxt users have problems loading
videos. This is so common that the Manual has a section on
Troubleshooting. Thus, let's show that it is indeed possible to watch
YouTube videos in Nyxt and even hack them. Thirdly, because YouTube is
a strong platform and even them need to bow for power users. Lastly,
but not least, because this was my own very [[https://discourse.atlas.engineer/t/almost-hacking-youtube-videos-speed-on-nyxt/117][first]] hack as a Nyxt user
:)

* Disclaimer

There are multiple ways to do certain things in Nyxt and to use
certain tools. To make things simple, this will be an opinionated
article striking for beginner friendliness. It is a jungle trail but
you can always go into the wild.

Emacs is a particularly sensitive topic. Most Nyxt hackers will
probably end up using Emacs (or Vim). However, Emacs has a steep
learning curve. Thus, the article will offer explanations with and
without Emacs.

* Developer Manual

There are four ways to install Nyxt. One of them is downloading the
stable version which is available [[https://nyxt.atlas.engineer/download][here]]. This is the regular user
approach.

The othre three ways of installing Nyxt are more advanced and
described in the [[https://github.com/atlas-engineer/nyxt/blob/master/documents/README.org#standard-developer-installation][Nyxt Developer Readme]], they are via Nix, Guix, or
using the Standard Developer Installation. Now, please read and follow
the instructions of the Standard Developer Installation. In addition,
installing quicklisp is listed as optional but please do it.

* Sanity checks

After following the instructions, there are some sanity checks that
can be done to see if the installation was successful.

  1. Open the terminal, and run ~$ sbcl~. It should return:
     #+BEGIN_SRC txt
     This is SBCL 2.0.1, an implementation of ANSI Common
     Lisp.
     #+END_SRC

  2. With SBCL running, type:

     #+BEGIN_SRC lisp * (member :quicklisp *features*)
     (:QUICKLISP
       :SB-BSD-SOCKETS-ADDRINFO :ASDF3.3 :ASDF3.2 :ASDF3.1 :ASDF3 :ASDF2
       :ASDF :OS-UNIX :NON-BASE-CHARS-EXIST-P :ASDF-UNICODE :X86-64 :64-BIT
       :ANSI-CL :COMMON-LISP :ELF :GENCGC :IEEE-FLOATING-POINT :LINUX
       :LITTLE-ENDIAN :PACKAGE-LOCAL-NICKNAMES :SB-CORE-COMPRESSION :SB-LDB
       :SB-PACKAGE-LOCKS :SB-THREAD :SB-UNICODE :SBCL :UNIX)
     #+END_SRC

  3. Lisp dependencies should be visible at ~\~/common-lisp/cl-webkit$
  ls -l~

  4. Reinstalling dependencies from Gnu/Linux and FreeBSD GTK
should return "some-dependency is already the newest version".

  5. After executing the following, the browser should be running:

    #+BEGIN_SRC lisp
    * (require :asdf) NIL * (asdf:load-asd  "/home/pedro/common-lisp/nyxt/nyxt.asd")
         #<ASDF/FIND-SYSTEM:DEFINE-OP > #<ASDF/PLAN:SEQUENTIAL-PLAN
         {1003F64DD3}> * (ql:quickload :nyxt/gi-gtk) To load
         "nyxt/gi-gtk": Load 1 ASDF system: nyxt/gi-gtk ; Loading
         "nyxt/gi-gtk" .....................................
         (:NYXT/GI-GTK)

         * (nyxt:start) <INFO> [23:19:32] Listening to socket
         "/run/user/1000/nyxt/nyxt.socket".  Nyxt version 2.0.0 <INFO>
         [23:19:32] Loading Lisp file
    "/home/pedro/.config/nyxt/auto-config.lisp".  NIL
    #+END_SRC

The second command was ~(asdf:load-asd
"/home/pedro/common-lisp/nyxt/nyxt.asd")~ but this was made to run on
my machine. In your environment you need to adapt ~(asdf:load-asd
"/the/path/to/your/nyxt/file/nyxt.asd")~ to your circumstances.

At this point, if everything went fine, Nyxt's Graphical User
Interface needs to be running. This version will be probably different
than the last stable release, having more experimental features available.

* Time for action

Now, it is time to really start the fun.

+ Load an YouTube video such as this
[[https://www.youtube.com/watch?v=SVteSEjKytw][one]].

The Graphical User Interface way would be ~execute-command~, type
~set-url~ and, finally type
~https://www.youtube.com/watch?v=SVteSEjKytw~.
Since this is a beginner hacking lesson, let's execute the same command using the REPL.
In the prompt, use:

#+BEGIN_SRC lisp
CL-USER> (nyxt:set-url)
#+END_SRC

Now, type the URL. Another approach, using even a lower level approach
would be calling a function used by the command (instead of the
command). This function is ~buffer-load~.

#+BEGIN_SRC lisp
(nyxt:buffer-load "https://www.youtube.com/watch?v=SVteSEjKytw")
#+END_SRC

- see the speed on youtube
- open inspector
- insert javascript snipet on the inspector

* The bookmarklet

- what bookmarlets are
- create the bookmarklet
- use the macro define-bookmarklet-command (doc string, name, js snippet)
- insert on the lisp image
- use the bookmarklet from the REPL
- use the bookmarket from the Nyxt's GUI

* Make it persistent across sections
- insert on the config file
- re-start
- see it works

* Packages briefly explained
- why packages exist and what are they
- pratical examples with :, ::, (in-package ...), going back to the top-level
- examples with copy, web-mode, and others

* The Next episode
- use nyxt command with parenscript instead of javascript
- more lispy approach
- deal with other macros
- Stay tunned

* More material to learn
+ Atlas' Engineer material recommendation
+ My tweaked recommendation
+ Common Lisp
  - Symbolic
  - Sonya
  - PCL
+ Emacs
- Mastering Emacs
- Susam Github https://github.com/susam/emacs4cl#who-is-this-for
+ Youtube
- Marco Beringer (Emacs, Slime, Common Lisp)
- Atlanta FP (Common Lisp)
- System Crafters (Emacs)
