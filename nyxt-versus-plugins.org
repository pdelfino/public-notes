#+TITLE: "Why should I use Nyxt if I can use Vimium?"
#+AUTHOR: By John Mercouris and Pedro Delfino
#+FILETAGS: :feature:
 
* The infamous question

After introducing Nyxt to some people, it is frequent to listen
questions such as: /Why should I use Nyxt if I can use Vimium (or 'Vimari
'Vrome 'Chromemacs 'Vimperator ...) in my favorite-popular-web-browser?/

This question is reasonable. Web browsers and their extensions are part of one's
daily habits. If one happen to be productive using them, it just makes
sense to be really careful before trying something new.

In order to answer this frequent question, we decided to list four
points that show the difference between Nyxt and popular plug-ins
such as:

- Vimium;
- Tridactyl (an evoluion of Vimperator/Pentadactyl);
- Surfingkeys;
- cVim;
- Vimari;
- Chromemacs;
- Vim Vixen;
- Vimac;
- Vieb;
- Hunt-n-peck;
- Vimium-C;
- Shortcat;
- Firevin;

All of them try to bring Vim/Emacs philosophy to mainstream web
browsers. Our goal is not to demean other projects but clarify the
contrast between Nyxt and those plug-ins. Each point will be
illustrated by useful practical examples.

* Differences

1. Nyxt is fully customizable and extensible, plug-ins are
not. Examples:
   + In Nyxt, users can customize the alphabet used for
link-hinting. It does not need to be the American alphabet. If the
user is using a popular "QWERTY" keyboard, it could be changed to
"qwertyasdfgzxcvb" to provide more ergonomics. Same for Dvorak keyboard.
   + Users can extend Nyxt creating their own modes, hooks, and commands.
   + Users can do all the changes mentioned above while the program is
   running which means live hackability.

2. Nyxt can perform additional computation in separate background
   threads while plug-ins cannot.
   + keyword extraction (develop more).
   + sophisticated analysis of documents - practical examples?

3. Nyxt can interact and integrate with the user's operating system to run
   external programs or scripts while plug-ins cannot..
   + useful practical examples?
   + ?
   + ?

4. Nyxt is programmed in Common Lisp, plug-ins are in JavaScript.
   + Link hinting provides a practical illustration. In Nyxt, the
     contents of the link hints is collected. After querying the page,
     all clickable elements are returned as a list in Common Lisp. Then,
     all sorts of algorithms from fuzzy matching on the URLs is
     possible outside of Javascript. This process has multithread
     nature which is simply not possible strictly in Javascript. [1]

   + In Nyxt, it is possible to see all the links that exist in all of
     the user buffers (tabs).

* Conclusion

Plug-ins are only part of the equation. Usually, they cover only
link-hinting and navigation. Moreover, they do it in a simplified way.

[1] Turing Equivalence states that "two computers P and Q are called
equivalent if P can simulate Q and Q can simulate P", the design of
programming languages matter. Does the affirmation above suggests that 
CL and Javascript are simply not
